/**
 * @file 12_highest_divisible_triangular_number.cpp
 * @author Steven Aquino
 * @brief The sequence of triangle numbers is generated by adding the natural
 * numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * The first ten terms would be
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred
 * divisors?
 * @date 2020-06-20
 *
 * @copyright Copyright (c) 2020
 *
 */

#include <iostream>

long long divisor_count(long long n);
long long get_triangle_number_with_divisor_count(long long divisors);

/**
 * @brief Controls the operation of the program.
 */
int main()
{
    std::cout << "Triangle number with over 5 divisors: "
              << get_triangle_number_with_divisor_count(5) << "\n";

    std::cout << "Triangle number with over 500 divisors: "
              << get_triangle_number_with_divisor_count(500) << "\n";

    return 0;
}

/**
 * @brief Gets the first triangle number with a divisor count greater than or
 * equal to the minimum count given.
 *
 * @param min_count Minimum number of divisors.
 * @return The first triangle number with amount of divisors over the minimum.
 */
long long get_triangle_number_with_divisor_count(long long min_count)
{
    long long n = 0;
    long long triangle_num;

    while (++n) {
        // Triangle number formula.
        triangle_num = (n * (n + 1)) / 2;

        if (divisor_count(triangle_num) >= min_count) {
            break;
        }
    }

    return triangle_num;
}

/**
 * Finds divisor count of the number.
 * @param num An integer.
 * @return The number's divisor count.
 */
long long divisor_count(long long num)
{
    long long divisors = 0;

    // (i * i <= num) decreases the time it takes to calculate big numbers.
    for (int i = 1; i * i <= num; i++) {
        if (num % i == 0) {
            divisors++;

            // Counts divisors that aren't explicitly tested because of i*i.
            if (num / i != i) {
                divisors++;
            }
        }
    }

    return divisors;
}
